#[doc = "raw binary"]
pub const IDENTITY: u64 = 0x0u64;
#[doc = "CIDv1"]
pub const CIDV1: u64 = 0x1u64;
#[doc = "CIDv2"]
pub const CIDV2: u64 = 0x2u64;
#[doc = "CIDv3"]
pub const CIDV3: u64 = 0x3u64;
#[doc = ""]
pub const IP4: u64 = 0x4u64;
#[doc = ""]
pub const TCP: u64 = 0x6u64;
#[doc = ""]
pub const SHA1: u64 = 0x11u64;
#[doc = ""]
pub const SHA2_256: u64 = 0x12u64;
#[doc = ""]
pub const SHA2_512: u64 = 0x13u64;
#[doc = ""]
pub const SHA3_512: u64 = 0x14u64;
#[doc = ""]
pub const SHA3_384: u64 = 0x15u64;
#[doc = ""]
pub const SHA3_256: u64 = 0x16u64;
#[doc = ""]
pub const SHA3_224: u64 = 0x17u64;
#[doc = ""]
pub const SHAKE_128: u64 = 0x18u64;
#[doc = ""]
pub const SHAKE_256: u64 = 0x19u64;
#[doc = "keccak has variable output length. The number specifies the core length"]
pub const KECCAK_224: u64 = 0x1au64;
#[doc = ""]
pub const KECCAK_256: u64 = 0x1bu64;
#[doc = ""]
pub const KECCAK_384: u64 = 0x1cu64;
#[doc = ""]
pub const KECCAK_512: u64 = 0x1du64;
#[doc = "BLAKE3 has a default 32 byte output length. The maximum length is (2^64)-1 bytes."]
pub const BLAKE3: u64 = 0x1eu64;
#[doc = "aka SHA-384; as specified by FIPS 180-4."]
pub const SHA2_384: u64 = 0x20u64;
#[doc = ""]
pub const DCCP: u64 = 0x21u64;
#[doc = "The first 64-bits of a murmur3-x64-128 - used for UnixFS directory sharding."]
pub const MURMUR3_X64_64: u64 = 0x22u64;
#[doc = ""]
pub const MURMUR3_32: u64 = 0x23u64;
#[doc = ""]
pub const IP6: u64 = 0x29u64;
#[doc = ""]
pub const IP6ZONE: u64 = 0x2au64;
#[doc = "CIDR mask for IP addresses"]
pub const IPCIDR: u64 = 0x2bu64;
#[doc = "Namespace for string paths. Corresponds to `/` in ASCII."]
pub const PATH: u64 = 0x2fu64;
#[doc = ""]
pub const MULTICODEC: u64 = 0x30u64;
#[doc = ""]
pub const MULTIHASH: u64 = 0x31u64;
#[doc = ""]
pub const MULTIADDR: u64 = 0x32u64;
#[doc = ""]
pub const MULTIBASE: u64 = 0x33u64;
#[doc = "Variable signature (varsig) multiformat"]
pub const VARSIG: u64 = 0x34u64;
#[doc = ""]
pub const DNS: u64 = 0x35u64;
#[doc = ""]
pub const DNS4: u64 = 0x36u64;
#[doc = ""]
pub const DNS6: u64 = 0x37u64;
#[doc = ""]
pub const DNSADDR: u64 = 0x38u64;
#[doc = "Protocol Buffers"]
pub const PROTOBUF: u64 = 0x50u64;
#[doc = "CBOR"]
pub const CBOR: u64 = 0x51u64;
#[doc = "raw binary"]
pub const RAW: u64 = 0x55u64;
#[doc = ""]
pub const DBL_SHA2_256: u64 = 0x56u64;
#[doc = "recursive length prefix"]
pub const RLP: u64 = 0x60u64;
#[doc = "bencode"]
pub const BENCODE: u64 = 0x63u64;
#[doc = "MerkleDAG protobuf"]
pub const DAG_PB: u64 = 0x70u64;
#[doc = "MerkleDAG cbor"]
pub const DAG_CBOR: u64 = 0x71u64;
#[doc = "Libp2p Public Key"]
pub const LIBP2P_KEY: u64 = 0x72u64;
#[doc = "Raw Git object"]
pub const GIT_RAW: u64 = 0x78u64;
#[doc = "Torrent file info field (bencoded)"]
pub const TORRENT_INFO: u64 = 0x7bu64;
#[doc = "Torrent file (bencoded)"]
pub const TORRENT_FILE: u64 = 0x7cu64;
#[doc = "Leofcoin Block"]
pub const LEOFCOIN_BLOCK: u64 = 0x81u64;
#[doc = "Leofcoin Transaction"]
pub const LEOFCOIN_TX: u64 = 0x82u64;
#[doc = "Leofcoin Peer Reputation"]
pub const LEOFCOIN_PR: u64 = 0x83u64;
#[doc = ""]
pub const SCTP: u64 = 0x84u64;
#[doc = "MerkleDAG JOSE"]
pub const DAG_JOSE: u64 = 0x85u64;
#[doc = "MerkleDAG COSE"]
pub const DAG_COSE: u64 = 0x86u64;
#[doc = "Ethereum Header (RLP)"]
pub const ETH_BLOCK: u64 = 0x90u64;
#[doc = "Ethereum Header List (RLP)"]
pub const ETH_BLOCK_LIST: u64 = 0x91u64;
#[doc = "Ethereum Transaction Trie (Eth-Trie)"]
pub const ETH_TX_TRIE: u64 = 0x92u64;
#[doc = "Ethereum Transaction (MarshalBinary)"]
pub const ETH_TX: u64 = 0x93u64;
#[doc = "Ethereum Transaction Receipt Trie (Eth-Trie)"]
pub const ETH_TX_RECEIPT_TRIE: u64 = 0x94u64;
#[doc = "Ethereum Transaction Receipt (MarshalBinary)"]
pub const ETH_TX_RECEIPT: u64 = 0x95u64;
#[doc = "Ethereum State Trie (Eth-Secure-Trie)"]
pub const ETH_STATE_TRIE: u64 = 0x96u64;
#[doc = "Ethereum Account Snapshot (RLP)"]
pub const ETH_ACCOUNT_SNAPSHOT: u64 = 0x97u64;
#[doc = "Ethereum Contract Storage Trie (Eth-Secure-Trie)"]
pub const ETH_STORAGE_TRIE: u64 = 0x98u64;
#[doc = "Ethereum Transaction Receipt Log Trie (Eth-Trie)"]
pub const ETH_RECEIPT_LOG_TRIE: u64 = 0x99u64;
#[doc = "Ethereum Transaction Receipt Log (RLP)"]
pub const ETH_RECEIPT_LOG: u64 = 0x9au64;
#[doc = "128-bit AES symmetric key"]
pub const AES_128: u64 = 0xa0u64;
#[doc = "192-bit AES symmetric key"]
pub const AES_192: u64 = 0xa1u64;
#[doc = "256-bit AES symmetric key"]
pub const AES_256: u64 = 0xa2u64;
#[doc = "128-bit ChaCha symmetric key"]
pub const CHACHA_128: u64 = 0xa3u64;
#[doc = "256-bit ChaCha symmetric key"]
pub const CHACHA_256: u64 = 0xa4u64;
#[doc = "Bitcoin Block"]
pub const BITCOIN_BLOCK: u64 = 0xb0u64;
#[doc = "Bitcoin Tx"]
pub const BITCOIN_TX: u64 = 0xb1u64;
#[doc = "Bitcoin Witness Commitment"]
pub const BITCOIN_WITNESS_COMMITMENT: u64 = 0xb2u64;
#[doc = "Zcash Block"]
pub const ZCASH_BLOCK: u64 = 0xc0u64;
#[doc = "Zcash Tx"]
pub const ZCASH_TX: u64 = 0xc1u64;
#[doc = "CAIP-50 multi-chain account id"]
pub const CAIP_50: u64 = 0xcau64;
#[doc = "Ceramic Stream Id"]
pub const STREAMID: u64 = 0xceu64;
#[doc = "Stellar Block"]
pub const STELLAR_BLOCK: u64 = 0xd0u64;
#[doc = "Stellar Tx"]
pub const STELLAR_TX: u64 = 0xd1u64;
#[doc = ""]
pub const MD4: u64 = 0xd4u64;
#[doc = ""]
pub const MD5: u64 = 0xd5u64;
#[doc = "Decred Block"]
pub const DECRED_BLOCK: u64 = 0xe0u64;
#[doc = "Decred Tx"]
pub const DECRED_TX: u64 = 0xe1u64;
#[doc = "IPLD path"]
pub const IPLD: u64 = 0xe2u64;
#[doc = "IPFS path"]
pub const IPFS: u64 = 0xe3u64;
#[doc = "Swarm path"]
pub const SWARM: u64 = 0xe4u64;
#[doc = "IPNS path"]
pub const IPNS: u64 = 0xe5u64;
#[doc = "ZeroNet site address"]
pub const ZERONET: u64 = 0xe6u64;
#[doc = "Secp256k1 public key (compressed)"]
pub const SECP256K1_PUB: u64 = 0xe7u64;
#[doc = "DNSLink path"]
pub const DNSLINK: u64 = 0xe8u64;
#[doc = "BLS12-381 public key in the G1 field"]
pub const BLS12_381_G1_PUB: u64 = 0xeau64;
#[doc = "BLS12-381 public key in the G2 field"]
pub const BLS12_381_G2_PUB: u64 = 0xebu64;
#[doc = "Curve25519 public key"]
pub const X25519_PUB: u64 = 0xecu64;
#[doc = "Ed25519 public key"]
pub const ED25519_PUB: u64 = 0xedu64;
#[doc = "BLS12-381 concatenated public keys in both the G1 and G2 fields"]
pub const BLS12_381_G1G2_PUB: u64 = 0xeeu64;
#[doc = "Sr25519 public key"]
pub const SR25519_PUB: u64 = 0xefu64;
#[doc = "Dash Block"]
pub const DASH_BLOCK: u64 = 0xf0u64;
#[doc = "Dash Tx"]
pub const DASH_TX: u64 = 0xf1u64;
#[doc = "Swarm Manifest"]
pub const SWARM_MANIFEST: u64 = 0xfau64;
#[doc = "Swarm Feed"]
pub const SWARM_FEED: u64 = 0xfbu64;
#[doc = "Swarm BeeSon"]
pub const BEESON: u64 = 0xfcu64;
#[doc = ""]
pub const UDP: u64 = 0x111u64;
#[doc = "Use webrtc or webrtc-direct instead"]
#[deprecated]
pub const P2P_WEBRTC_STAR: u64 = 0x113u64;
#[doc = "Use webrtc or webrtc-direct instead"]
#[deprecated]
pub const P2P_WEBRTC_DIRECT: u64 = 0x114u64;
#[doc = ""]
#[deprecated]
pub const P2P_STARDUST: u64 = 0x115u64;
#[doc = "ICE-lite webrtc transport with SDP munging during connection establishment and without use of a STUN server"]
pub const WEBRTC_DIRECT: u64 = 0x118u64;
#[doc = "webrtc transport where connection establishment is according to w3c spec"]
pub const WEBRTC: u64 = 0x119u64;
#[doc = ""]
pub const P2P_CIRCUIT: u64 = 0x122u64;
#[doc = "MerkleDAG json"]
pub const DAG_JSON: u64 = 0x129u64;
#[doc = ""]
pub const UDT: u64 = 0x12du64;
#[doc = ""]
pub const UTP: u64 = 0x12eu64;
#[doc = "CRC-32 non-cryptographic hash algorithm (IEEE 802.3)"]
pub const CRC32: u64 = 0x132u64;
#[doc = "CRC-64 non-cryptographic hash algorithm (ECMA-182 - Annex B)"]
pub const CRC64_ECMA: u64 = 0x164u64;
#[doc = ""]
pub const UNIX: u64 = 0x190u64;
#[doc = "Textile Thread"]
pub const THREAD: u64 = 0x196u64;
#[doc = "libp2p"]
pub const P2P: u64 = 0x1a5u64;
#[doc = ""]
pub const HTTPS: u64 = 0x1bbu64;
#[doc = ""]
pub const ONION: u64 = 0x1bcu64;
#[doc = ""]
pub const ONION3: u64 = 0x1bdu64;
#[doc = "I2P base64 (raw public key)"]
pub const GARLIC64: u64 = 0x1beu64;
#[doc = "I2P base32 (hashed public key or encoded public key/checksum+optional secret)"]
pub const GARLIC32: u64 = 0x1bfu64;
#[doc = ""]
pub const TLS: u64 = 0x1c0u64;
#[doc = "Server Name Indication RFC 6066 ยง 3"]
pub const SNI: u64 = 0x1c1u64;
#[doc = ""]
pub const NOISE: u64 = 0x1c6u64;
#[doc = ""]
pub const QUIC: u64 = 0x1ccu64;
#[doc = ""]
pub const QUIC_V1: u64 = 0x1cdu64;
#[doc = ""]
pub const WEBTRANSPORT: u64 = 0x1d1u64;
#[doc = "TLS certificate's fingerprint as a multihash"]
pub const CERTHASH: u64 = 0x1d2u64;
#[doc = ""]
pub const WS: u64 = 0x1ddu64;
#[doc = ""]
pub const WSS: u64 = 0x1deu64;
#[doc = ""]
pub const P2P_WEBSOCKET_STAR: u64 = 0x1dfu64;
#[doc = ""]
pub const HTTP: u64 = 0x1e0u64;
#[doc = "SoftWare Heritage persistent IDentifier version 1 snapshot"]
pub const SWHID_1_SNP: u64 = 0x1f0u64;
#[doc = "JSON (UTF-8-encoded)"]
pub const JSON: u64 = 0x200u64;
#[doc = "MessagePack"]
pub const MESSAGEPACK: u64 = 0x201u64;
#[doc = "Content Addressable aRchive (CAR)"]
pub const CAR: u64 = 0x202u64;
#[doc = "Signed IPNS Record"]
pub const IPNS_RECORD: u64 = 0x300u64;
#[doc = "libp2p peer record type"]
pub const LIBP2P_PEER_RECORD: u64 = 0x301u64;
#[doc = "libp2p relay reservation voucher"]
pub const LIBP2P_RELAY_RSVP: u64 = 0x302u64;
#[doc = "in memory transport for self-dialing and testing; arbitrary"]
pub const MEMORYTRANSPORT: u64 = 0x309u64;
#[doc = "CARv2 IndexSorted index format"]
pub const CAR_INDEX_SORTED: u64 = 0x400u64;
#[doc = "CARv2 MultihashIndexSorted index format"]
pub const CAR_MULTIHASH_INDEX_SORTED: u64 = 0x401u64;
#[doc = "Bitswap datatransfer"]
pub const TRANSPORT_BITSWAP: u64 = 0x900u64;
#[doc = "Filecoin graphsync datatransfer"]
pub const TRANSPORT_GRAPHSYNC_FILECOINV1: u64 = 0x910u64;
#[doc = "HTTP IPFS Gateway trustless datatransfer"]
pub const TRANSPORT_IPFS_GATEWAY_HTTP: u64 = 0x920u64;
#[doc = "Compact encoding for Decentralized Identifers"]
pub const MULTIDID: u64 = 0xd1du64;
#[doc = "SHA2-256 with the two most significant bits from the last byte zeroed (as via a mask with 0b00111111) - used for proving trees as in Filecoin"]
pub const SHA2_256_TRUNC254_PADDED: u64 = 0x1012u64;
#[doc = "aka SHA-224; as specified by FIPS 180-4."]
pub const SHA2_224: u64 = 0x1013u64;
#[doc = "aka SHA-512/224; as specified by FIPS 180-4."]
pub const SHA2_512_224: u64 = 0x1014u64;
#[doc = "aka SHA-512/256; as specified by FIPS 180-4."]
pub const SHA2_512_256: u64 = 0x1015u64;
#[doc = ""]
pub const MURMUR3_X64_128: u64 = 0x1022u64;
#[doc = ""]
pub const RIPEMD_128: u64 = 0x1052u64;
#[doc = ""]
pub const RIPEMD_160: u64 = 0x1053u64;
#[doc = ""]
pub const RIPEMD_256: u64 = 0x1054u64;
#[doc = ""]
pub const RIPEMD_320: u64 = 0x1055u64;
#[doc = ""]
pub const X11: u64 = 0x1100u64;
#[doc = "P-256 public Key (compressed)"]
pub const P256_PUB: u64 = 0x1200u64;
#[doc = "P-384 public Key (compressed)"]
pub const P384_PUB: u64 = 0x1201u64;
#[doc = "P-521 public Key (compressed)"]
pub const P521_PUB: u64 = 0x1202u64;
#[doc = "Ed448 public Key"]
pub const ED448_PUB: u64 = 0x1203u64;
#[doc = "X448 public Key"]
pub const X448_PUB: u64 = 0x1204u64;
#[doc = "RSA public key. DER-encoded ASN.1 type RSAPublicKey according to IETF RFC 8017 (PKCS #1)"]
pub const RSA_PUB: u64 = 0x1205u64;
#[doc = "SM2 public key (compressed)"]
pub const SM2_PUB: u64 = 0x1206u64;
#[doc = "Ed25519 private key"]
pub const ED25519_PRIV: u64 = 0x1300u64;
#[doc = "Secp256k1 private key"]
pub const SECP256K1_PRIV: u64 = 0x1301u64;
#[doc = "Curve25519 private key"]
pub const X25519_PRIV: u64 = 0x1302u64;
#[doc = "Sr25519 private key"]
pub const SR25519_PRIV: u64 = 0x1303u64;
#[doc = "RSA private key"]
pub const RSA_PRIV: u64 = 0x1305u64;
#[doc = "P-256 private key"]
pub const P256_PRIV: u64 = 0x1306u64;
#[doc = "P-384 private key"]
pub const P384_PRIV: u64 = 0x1307u64;
#[doc = "P-521 private key"]
pub const P521_PRIV: u64 = 0x1308u64;
#[doc = "KangarooTwelve is an extendable-output hash function based on Keccak-p"]
pub const KANGAROOTWELVE: u64 = 0x1d01u64;
#[doc = "AES Galois/Counter Mode with 256-bit key and 12-byte IV"]
pub const AES_GCM_256: u64 = 0x2000u64;
#[doc = "Experimental QUIC over yggdrasil and ironwood routing protocol"]
pub const SILVERPINE: u64 = 0x3f42u64;
#[doc = ""]
pub const SM3_256: u64 = 0x534du64;
#[doc = "The sum of multiple sha2-256 hashes; as specified by Ceramic CIP-124."]
pub const SHA256A: u64 = 0x7012u64;
#[doc = "Blake2b consists of 64 output lengths that give different hashes"]
pub const BLAKE2B_8: u64 = 0xb201u64;
#[doc = ""]
pub const BLAKE2B_16: u64 = 0xb202u64;
#[doc = ""]
pub const BLAKE2B_24: u64 = 0xb203u64;
#[doc = ""]
pub const BLAKE2B_32: u64 = 0xb204u64;
#[doc = ""]
pub const BLAKE2B_40: u64 = 0xb205u64;
#[doc = ""]
pub const BLAKE2B_48: u64 = 0xb206u64;
#[doc = ""]
pub const BLAKE2B_56: u64 = 0xb207u64;
#[doc = ""]
pub const BLAKE2B_64: u64 = 0xb208u64;
#[doc = ""]
pub const BLAKE2B_72: u64 = 0xb209u64;
#[doc = ""]
pub const BLAKE2B_80: u64 = 0xb20au64;
#[doc = ""]
pub const BLAKE2B_88: u64 = 0xb20bu64;
#[doc = ""]
pub const BLAKE2B_96: u64 = 0xb20cu64;
#[doc = ""]
pub const BLAKE2B_104: u64 = 0xb20du64;
#[doc = ""]
pub const BLAKE2B_112: u64 = 0xb20eu64;
#[doc = ""]
pub const BLAKE2B_120: u64 = 0xb20fu64;
#[doc = ""]
pub const BLAKE2B_128: u64 = 0xb210u64;
#[doc = ""]
pub const BLAKE2B_136: u64 = 0xb211u64;
#[doc = ""]
pub const BLAKE2B_144: u64 = 0xb212u64;
#[doc = ""]
pub const BLAKE2B_152: u64 = 0xb213u64;
#[doc = ""]
pub const BLAKE2B_160: u64 = 0xb214u64;
#[doc = ""]
pub const BLAKE2B_168: u64 = 0xb215u64;
#[doc = ""]
pub const BLAKE2B_176: u64 = 0xb216u64;
#[doc = ""]
pub const BLAKE2B_184: u64 = 0xb217u64;
#[doc = ""]
pub const BLAKE2B_192: u64 = 0xb218u64;
#[doc = ""]
pub const BLAKE2B_200: u64 = 0xb219u64;
#[doc = ""]
pub const BLAKE2B_208: u64 = 0xb21au64;
#[doc = ""]
pub const BLAKE2B_216: u64 = 0xb21bu64;
#[doc = ""]
pub const BLAKE2B_224: u64 = 0xb21cu64;
#[doc = ""]
pub const BLAKE2B_232: u64 = 0xb21du64;
#[doc = ""]
pub const BLAKE2B_240: u64 = 0xb21eu64;
#[doc = ""]
pub const BLAKE2B_248: u64 = 0xb21fu64;
#[doc = ""]
pub const BLAKE2B_256: u64 = 0xb220u64;
#[doc = ""]
pub const BLAKE2B_264: u64 = 0xb221u64;
#[doc = ""]
pub const BLAKE2B_272: u64 = 0xb222u64;
#[doc = ""]
pub const BLAKE2B_280: u64 = 0xb223u64;
#[doc = ""]
pub const BLAKE2B_288: u64 = 0xb224u64;
#[doc = ""]
pub const BLAKE2B_296: u64 = 0xb225u64;
#[doc = ""]
pub const BLAKE2B_304: u64 = 0xb226u64;
#[doc = ""]
pub const BLAKE2B_312: u64 = 0xb227u64;
#[doc = ""]
pub const BLAKE2B_320: u64 = 0xb228u64;
#[doc = ""]
pub const BLAKE2B_328: u64 = 0xb229u64;
#[doc = ""]
pub const BLAKE2B_336: u64 = 0xb22au64;
#[doc = ""]
pub const BLAKE2B_344: u64 = 0xb22bu64;
#[doc = ""]
pub const BLAKE2B_352: u64 = 0xb22cu64;
#[doc = ""]
pub const BLAKE2B_360: u64 = 0xb22du64;
#[doc = ""]
pub const BLAKE2B_368: u64 = 0xb22eu64;
#[doc = ""]
pub const BLAKE2B_376: u64 = 0xb22fu64;
#[doc = ""]
pub const BLAKE2B_384: u64 = 0xb230u64;
#[doc = ""]
pub const BLAKE2B_392: u64 = 0xb231u64;
#[doc = ""]
pub const BLAKE2B_400: u64 = 0xb232u64;
#[doc = ""]
pub const BLAKE2B_408: u64 = 0xb233u64;
#[doc = ""]
pub const BLAKE2B_416: u64 = 0xb234u64;
#[doc = ""]
pub const BLAKE2B_424: u64 = 0xb235u64;
#[doc = ""]
pub const BLAKE2B_432: u64 = 0xb236u64;
#[doc = ""]
pub const BLAKE2B_440: u64 = 0xb237u64;
#[doc = ""]
pub const BLAKE2B_448: u64 = 0xb238u64;
#[doc = ""]
pub const BLAKE2B_456: u64 = 0xb239u64;
#[doc = ""]
pub const BLAKE2B_464: u64 = 0xb23au64;
#[doc = ""]
pub const BLAKE2B_472: u64 = 0xb23bu64;
#[doc = ""]
pub const BLAKE2B_480: u64 = 0xb23cu64;
#[doc = ""]
pub const BLAKE2B_488: u64 = 0xb23du64;
#[doc = ""]
pub const BLAKE2B_496: u64 = 0xb23eu64;
#[doc = ""]
pub const BLAKE2B_504: u64 = 0xb23fu64;
#[doc = ""]
pub const BLAKE2B_512: u64 = 0xb240u64;
#[doc = "Blake2s consists of 32 output lengths that give different hashes"]
pub const BLAKE2S_8: u64 = 0xb241u64;
#[doc = ""]
pub const BLAKE2S_16: u64 = 0xb242u64;
#[doc = ""]
pub const BLAKE2S_24: u64 = 0xb243u64;
#[doc = ""]
pub const BLAKE2S_32: u64 = 0xb244u64;
#[doc = ""]
pub const BLAKE2S_40: u64 = 0xb245u64;
#[doc = ""]
pub const BLAKE2S_48: u64 = 0xb246u64;
#[doc = ""]
pub const BLAKE2S_56: u64 = 0xb247u64;
#[doc = ""]
pub const BLAKE2S_64: u64 = 0xb248u64;
#[doc = ""]
pub const BLAKE2S_72: u64 = 0xb249u64;
#[doc = ""]
pub const BLAKE2S_80: u64 = 0xb24au64;
#[doc = ""]
pub const BLAKE2S_88: u64 = 0xb24bu64;
#[doc = ""]
pub const BLAKE2S_96: u64 = 0xb24cu64;
#[doc = ""]
pub const BLAKE2S_104: u64 = 0xb24du64;
#[doc = ""]
pub const BLAKE2S_112: u64 = 0xb24eu64;
#[doc = ""]
pub const BLAKE2S_120: u64 = 0xb24fu64;
#[doc = ""]
pub const BLAKE2S_128: u64 = 0xb250u64;
#[doc = ""]
pub const BLAKE2S_136: u64 = 0xb251u64;
#[doc = ""]
pub const BLAKE2S_144: u64 = 0xb252u64;
#[doc = ""]
pub const BLAKE2S_152: u64 = 0xb253u64;
#[doc = ""]
pub const BLAKE2S_160: u64 = 0xb254u64;
#[doc = ""]
pub const BLAKE2S_168: u64 = 0xb255u64;
#[doc = ""]
pub const BLAKE2S_176: u64 = 0xb256u64;
#[doc = ""]
pub const BLAKE2S_184: u64 = 0xb257u64;
#[doc = ""]
pub const BLAKE2S_192: u64 = 0xb258u64;
#[doc = ""]
pub const BLAKE2S_200: u64 = 0xb259u64;
#[doc = ""]
pub const BLAKE2S_208: u64 = 0xb25au64;
#[doc = ""]
pub const BLAKE2S_216: u64 = 0xb25bu64;
#[doc = ""]
pub const BLAKE2S_224: u64 = 0xb25cu64;
#[doc = ""]
pub const BLAKE2S_232: u64 = 0xb25du64;
#[doc = ""]
pub const BLAKE2S_240: u64 = 0xb25eu64;
#[doc = ""]
pub const BLAKE2S_248: u64 = 0xb25fu64;
#[doc = ""]
pub const BLAKE2S_256: u64 = 0xb260u64;
#[doc = "Skein256 consists of 32 output lengths that give different hashes"]
pub const SKEIN256_8: u64 = 0xb301u64;
#[doc = ""]
pub const SKEIN256_16: u64 = 0xb302u64;
#[doc = ""]
pub const SKEIN256_24: u64 = 0xb303u64;
#[doc = ""]
pub const SKEIN256_32: u64 = 0xb304u64;
#[doc = ""]
pub const SKEIN256_40: u64 = 0xb305u64;
#[doc = ""]
pub const SKEIN256_48: u64 = 0xb306u64;
#[doc = ""]
pub const SKEIN256_56: u64 = 0xb307u64;
#[doc = ""]
pub const SKEIN256_64: u64 = 0xb308u64;
#[doc = ""]
pub const SKEIN256_72: u64 = 0xb309u64;
#[doc = ""]
pub const SKEIN256_80: u64 = 0xb30au64;
#[doc = ""]
pub const SKEIN256_88: u64 = 0xb30bu64;
#[doc = ""]
pub const SKEIN256_96: u64 = 0xb30cu64;
#[doc = ""]
pub const SKEIN256_104: u64 = 0xb30du64;
#[doc = ""]
pub const SKEIN256_112: u64 = 0xb30eu64;
#[doc = ""]
pub const SKEIN256_120: u64 = 0xb30fu64;
#[doc = ""]
pub const SKEIN256_128: u64 = 0xb310u64;
#[doc = ""]
pub const SKEIN256_136: u64 = 0xb311u64;
#[doc = ""]
pub const SKEIN256_144: u64 = 0xb312u64;
#[doc = ""]
pub const SKEIN256_152: u64 = 0xb313u64;
#[doc = ""]
pub const SKEIN256_160: u64 = 0xb314u64;
#[doc = ""]
pub const SKEIN256_168: u64 = 0xb315u64;
#[doc = ""]
pub const SKEIN256_176: u64 = 0xb316u64;
#[doc = ""]
pub const SKEIN256_184: u64 = 0xb317u64;
#[doc = ""]
pub const SKEIN256_192: u64 = 0xb318u64;
#[doc = ""]
pub const SKEIN256_200: u64 = 0xb319u64;
#[doc = ""]
pub const SKEIN256_208: u64 = 0xb31au64;
#[doc = ""]
pub const SKEIN256_216: u64 = 0xb31bu64;
#[doc = ""]
pub const SKEIN256_224: u64 = 0xb31cu64;
#[doc = ""]
pub const SKEIN256_232: u64 = 0xb31du64;
#[doc = ""]
pub const SKEIN256_240: u64 = 0xb31eu64;
#[doc = ""]
pub const SKEIN256_248: u64 = 0xb31fu64;
#[doc = ""]
pub const SKEIN256_256: u64 = 0xb320u64;
#[doc = "Skein512 consists of 64 output lengths that give different hashes"]
pub const SKEIN512_8: u64 = 0xb321u64;
#[doc = ""]
pub const SKEIN512_16: u64 = 0xb322u64;
#[doc = ""]
pub const SKEIN512_24: u64 = 0xb323u64;
#[doc = ""]
pub const SKEIN512_32: u64 = 0xb324u64;
#[doc = ""]
pub const SKEIN512_40: u64 = 0xb325u64;
#[doc = ""]
pub const SKEIN512_48: u64 = 0xb326u64;
#[doc = ""]
pub const SKEIN512_56: u64 = 0xb327u64;
#[doc = ""]
pub const SKEIN512_64: u64 = 0xb328u64;
#[doc = ""]
pub const SKEIN512_72: u64 = 0xb329u64;
#[doc = ""]
pub const SKEIN512_80: u64 = 0xb32au64;
#[doc = ""]
pub const SKEIN512_88: u64 = 0xb32bu64;
#[doc = ""]
pub const SKEIN512_96: u64 = 0xb32cu64;
#[doc = ""]
pub const SKEIN512_104: u64 = 0xb32du64;
#[doc = ""]
pub const SKEIN512_112: u64 = 0xb32eu64;
#[doc = ""]
pub const SKEIN512_120: u64 = 0xb32fu64;
#[doc = ""]
pub const SKEIN512_128: u64 = 0xb330u64;
#[doc = ""]
pub const SKEIN512_136: u64 = 0xb331u64;
#[doc = ""]
pub const SKEIN512_144: u64 = 0xb332u64;
#[doc = ""]
pub const SKEIN512_152: u64 = 0xb333u64;
#[doc = ""]
pub const SKEIN512_160: u64 = 0xb334u64;
#[doc = ""]
pub const SKEIN512_168: u64 = 0xb335u64;
#[doc = ""]
pub const SKEIN512_176: u64 = 0xb336u64;
#[doc = ""]
pub const SKEIN512_184: u64 = 0xb337u64;
#[doc = ""]
pub const SKEIN512_192: u64 = 0xb338u64;
#[doc = ""]
pub const SKEIN512_200: u64 = 0xb339u64;
#[doc = ""]
pub const SKEIN512_208: u64 = 0xb33au64;
#[doc = ""]
pub const SKEIN512_216: u64 = 0xb33bu64;
#[doc = ""]
pub const SKEIN512_224: u64 = 0xb33cu64;
#[doc = ""]
pub const SKEIN512_232: u64 = 0xb33du64;
#[doc = ""]
pub const SKEIN512_240: u64 = 0xb33eu64;
#[doc = ""]
pub const SKEIN512_248: u64 = 0xb33fu64;
#[doc = ""]
pub const SKEIN512_256: u64 = 0xb340u64;
#[doc = ""]
pub const SKEIN512_264: u64 = 0xb341u64;
#[doc = ""]
pub const SKEIN512_272: u64 = 0xb342u64;
#[doc = ""]
pub const SKEIN512_280: u64 = 0xb343u64;
#[doc = ""]
pub const SKEIN512_288: u64 = 0xb344u64;
#[doc = ""]
pub const SKEIN512_296: u64 = 0xb345u64;
#[doc = ""]
pub const SKEIN512_304: u64 = 0xb346u64;
#[doc = ""]
pub const SKEIN512_312: u64 = 0xb347u64;
#[doc = ""]
pub const SKEIN512_320: u64 = 0xb348u64;
#[doc = ""]
pub const SKEIN512_328: u64 = 0xb349u64;
#[doc = ""]
pub const SKEIN512_336: u64 = 0xb34au64;
#[doc = ""]
pub const SKEIN512_344: u64 = 0xb34bu64;
#[doc = ""]
pub const SKEIN512_352: u64 = 0xb34cu64;
#[doc = ""]
pub const SKEIN512_360: u64 = 0xb34du64;
#[doc = ""]
pub const SKEIN512_368: u64 = 0xb34eu64;
#[doc = ""]
pub const SKEIN512_376: u64 = 0xb34fu64;
#[doc = ""]
pub const SKEIN512_384: u64 = 0xb350u64;
#[doc = ""]
pub const SKEIN512_392: u64 = 0xb351u64;
#[doc = ""]
pub const SKEIN512_400: u64 = 0xb352u64;
#[doc = ""]
pub const SKEIN512_408: u64 = 0xb353u64;
#[doc = ""]
pub const SKEIN512_416: u64 = 0xb354u64;
#[doc = ""]
pub const SKEIN512_424: u64 = 0xb355u64;
#[doc = ""]
pub const SKEIN512_432: u64 = 0xb356u64;
#[doc = ""]
pub const SKEIN512_440: u64 = 0xb357u64;
#[doc = ""]
pub const SKEIN512_448: u64 = 0xb358u64;
#[doc = ""]
pub const SKEIN512_456: u64 = 0xb359u64;
#[doc = ""]
pub const SKEIN512_464: u64 = 0xb35au64;
#[doc = ""]
pub const SKEIN512_472: u64 = 0xb35bu64;
#[doc = ""]
pub const SKEIN512_480: u64 = 0xb35cu64;
#[doc = ""]
pub const SKEIN512_488: u64 = 0xb35du64;
#[doc = ""]
pub const SKEIN512_496: u64 = 0xb35eu64;
#[doc = ""]
pub const SKEIN512_504: u64 = 0xb35fu64;
#[doc = ""]
pub const SKEIN512_512: u64 = 0xb360u64;
#[doc = "Skein1024 consists of 128 output lengths that give different hashes"]
pub const SKEIN1024_8: u64 = 0xb361u64;
#[doc = ""]
pub const SKEIN1024_16: u64 = 0xb362u64;
#[doc = ""]
pub const SKEIN1024_24: u64 = 0xb363u64;
#[doc = ""]
pub const SKEIN1024_32: u64 = 0xb364u64;
#[doc = ""]
pub const SKEIN1024_40: u64 = 0xb365u64;
#[doc = ""]
pub const SKEIN1024_48: u64 = 0xb366u64;
#[doc = ""]
pub const SKEIN1024_56: u64 = 0xb367u64;
#[doc = ""]
pub const SKEIN1024_64: u64 = 0xb368u64;
#[doc = ""]
pub const SKEIN1024_72: u64 = 0xb369u64;
#[doc = ""]
pub const SKEIN1024_80: u64 = 0xb36au64;
#[doc = ""]
pub const SKEIN1024_88: u64 = 0xb36bu64;
#[doc = ""]
pub const SKEIN1024_96: u64 = 0xb36cu64;
#[doc = ""]
pub const SKEIN1024_104: u64 = 0xb36du64;
#[doc = ""]
pub const SKEIN1024_112: u64 = 0xb36eu64;
#[doc = ""]
pub const SKEIN1024_120: u64 = 0xb36fu64;
#[doc = ""]
pub const SKEIN1024_128: u64 = 0xb370u64;
#[doc = ""]
pub const SKEIN1024_136: u64 = 0xb371u64;
#[doc = ""]
pub const SKEIN1024_144: u64 = 0xb372u64;
#[doc = ""]
pub const SKEIN1024_152: u64 = 0xb373u64;
#[doc = ""]
pub const SKEIN1024_160: u64 = 0xb374u64;
#[doc = ""]
pub const SKEIN1024_168: u64 = 0xb375u64;
#[doc = ""]
pub const SKEIN1024_176: u64 = 0xb376u64;
#[doc = ""]
pub const SKEIN1024_184: u64 = 0xb377u64;
#[doc = ""]
pub const SKEIN1024_192: u64 = 0xb378u64;
#[doc = ""]
pub const SKEIN1024_200: u64 = 0xb379u64;
#[doc = ""]
pub const SKEIN1024_208: u64 = 0xb37au64;
#[doc = ""]
pub const SKEIN1024_216: u64 = 0xb37bu64;
#[doc = ""]
pub const SKEIN1024_224: u64 = 0xb37cu64;
#[doc = ""]
pub const SKEIN1024_232: u64 = 0xb37du64;
#[doc = ""]
pub const SKEIN1024_240: u64 = 0xb37eu64;
#[doc = ""]
pub const SKEIN1024_248: u64 = 0xb37fu64;
#[doc = ""]
pub const SKEIN1024_256: u64 = 0xb380u64;
#[doc = ""]
pub const SKEIN1024_264: u64 = 0xb381u64;
#[doc = ""]
pub const SKEIN1024_272: u64 = 0xb382u64;
#[doc = ""]
pub const SKEIN1024_280: u64 = 0xb383u64;
#[doc = ""]
pub const SKEIN1024_288: u64 = 0xb384u64;
#[doc = ""]
pub const SKEIN1024_296: u64 = 0xb385u64;
#[doc = ""]
pub const SKEIN1024_304: u64 = 0xb386u64;
#[doc = ""]
pub const SKEIN1024_312: u64 = 0xb387u64;
#[doc = ""]
pub const SKEIN1024_320: u64 = 0xb388u64;
#[doc = ""]
pub const SKEIN1024_328: u64 = 0xb389u64;
#[doc = ""]
pub const SKEIN1024_336: u64 = 0xb38au64;
#[doc = ""]
pub const SKEIN1024_344: u64 = 0xb38bu64;
#[doc = ""]
pub const SKEIN1024_352: u64 = 0xb38cu64;
#[doc = ""]
pub const SKEIN1024_360: u64 = 0xb38du64;
#[doc = ""]
pub const SKEIN1024_368: u64 = 0xb38eu64;
#[doc = ""]
pub const SKEIN1024_376: u64 = 0xb38fu64;
#[doc = ""]
pub const SKEIN1024_384: u64 = 0xb390u64;
#[doc = ""]
pub const SKEIN1024_392: u64 = 0xb391u64;
#[doc = ""]
pub const SKEIN1024_400: u64 = 0xb392u64;
#[doc = ""]
pub const SKEIN1024_408: u64 = 0xb393u64;
#[doc = ""]
pub const SKEIN1024_416: u64 = 0xb394u64;
#[doc = ""]
pub const SKEIN1024_424: u64 = 0xb395u64;
#[doc = ""]
pub const SKEIN1024_432: u64 = 0xb396u64;
#[doc = ""]
pub const SKEIN1024_440: u64 = 0xb397u64;
#[doc = ""]
pub const SKEIN1024_448: u64 = 0xb398u64;
#[doc = ""]
pub const SKEIN1024_456: u64 = 0xb399u64;
#[doc = ""]
pub const SKEIN1024_464: u64 = 0xb39au64;
#[doc = ""]
pub const SKEIN1024_472: u64 = 0xb39bu64;
#[doc = ""]
pub const SKEIN1024_480: u64 = 0xb39cu64;
#[doc = ""]
pub const SKEIN1024_488: u64 = 0xb39du64;
#[doc = ""]
pub const SKEIN1024_496: u64 = 0xb39eu64;
#[doc = ""]
pub const SKEIN1024_504: u64 = 0xb39fu64;
#[doc = ""]
pub const SKEIN1024_512: u64 = 0xb3a0u64;
#[doc = ""]
pub const SKEIN1024_520: u64 = 0xb3a1u64;
#[doc = ""]
pub const SKEIN1024_528: u64 = 0xb3a2u64;
#[doc = ""]
pub const SKEIN1024_536: u64 = 0xb3a3u64;
#[doc = ""]
pub const SKEIN1024_544: u64 = 0xb3a4u64;
#[doc = ""]
pub const SKEIN1024_552: u64 = 0xb3a5u64;
#[doc = ""]
pub const SKEIN1024_560: u64 = 0xb3a6u64;
#[doc = ""]
pub const SKEIN1024_568: u64 = 0xb3a7u64;
#[doc = ""]
pub const SKEIN1024_576: u64 = 0xb3a8u64;
#[doc = ""]
pub const SKEIN1024_584: u64 = 0xb3a9u64;
#[doc = ""]
pub const SKEIN1024_592: u64 = 0xb3aau64;
#[doc = ""]
pub const SKEIN1024_600: u64 = 0xb3abu64;
#[doc = ""]
pub const SKEIN1024_608: u64 = 0xb3acu64;
#[doc = ""]
pub const SKEIN1024_616: u64 = 0xb3adu64;
#[doc = ""]
pub const SKEIN1024_624: u64 = 0xb3aeu64;
#[doc = ""]
pub const SKEIN1024_632: u64 = 0xb3afu64;
#[doc = ""]
pub const SKEIN1024_640: u64 = 0xb3b0u64;
#[doc = ""]
pub const SKEIN1024_648: u64 = 0xb3b1u64;
#[doc = ""]
pub const SKEIN1024_656: u64 = 0xb3b2u64;
#[doc = ""]
pub const SKEIN1024_664: u64 = 0xb3b3u64;
#[doc = ""]
pub const SKEIN1024_672: u64 = 0xb3b4u64;
#[doc = ""]
pub const SKEIN1024_680: u64 = 0xb3b5u64;
#[doc = ""]
pub const SKEIN1024_688: u64 = 0xb3b6u64;
#[doc = ""]
pub const SKEIN1024_696: u64 = 0xb3b7u64;
#[doc = ""]
pub const SKEIN1024_704: u64 = 0xb3b8u64;
#[doc = ""]
pub const SKEIN1024_712: u64 = 0xb3b9u64;
#[doc = ""]
pub const SKEIN1024_720: u64 = 0xb3bau64;
#[doc = ""]
pub const SKEIN1024_728: u64 = 0xb3bbu64;
#[doc = ""]
pub const SKEIN1024_736: u64 = 0xb3bcu64;
#[doc = ""]
pub const SKEIN1024_744: u64 = 0xb3bdu64;
#[doc = ""]
pub const SKEIN1024_752: u64 = 0xb3beu64;
#[doc = ""]
pub const SKEIN1024_760: u64 = 0xb3bfu64;
#[doc = ""]
pub const SKEIN1024_768: u64 = 0xb3c0u64;
#[doc = ""]
pub const SKEIN1024_776: u64 = 0xb3c1u64;
#[doc = ""]
pub const SKEIN1024_784: u64 = 0xb3c2u64;
#[doc = ""]
pub const SKEIN1024_792: u64 = 0xb3c3u64;
#[doc = ""]
pub const SKEIN1024_800: u64 = 0xb3c4u64;
#[doc = ""]
pub const SKEIN1024_808: u64 = 0xb3c5u64;
#[doc = ""]
pub const SKEIN1024_816: u64 = 0xb3c6u64;
#[doc = ""]
pub const SKEIN1024_824: u64 = 0xb3c7u64;
#[doc = ""]
pub const SKEIN1024_832: u64 = 0xb3c8u64;
#[doc = ""]
pub const SKEIN1024_840: u64 = 0xb3c9u64;
#[doc = ""]
pub const SKEIN1024_848: u64 = 0xb3cau64;
#[doc = ""]
pub const SKEIN1024_856: u64 = 0xb3cbu64;
#[doc = ""]
pub const SKEIN1024_864: u64 = 0xb3ccu64;
#[doc = ""]
pub const SKEIN1024_872: u64 = 0xb3cdu64;
#[doc = ""]
pub const SKEIN1024_880: u64 = 0xb3ceu64;
#[doc = ""]
pub const SKEIN1024_888: u64 = 0xb3cfu64;
#[doc = ""]
pub const SKEIN1024_896: u64 = 0xb3d0u64;
#[doc = ""]
pub const SKEIN1024_904: u64 = 0xb3d1u64;
#[doc = ""]
pub const SKEIN1024_912: u64 = 0xb3d2u64;
#[doc = ""]
pub const SKEIN1024_920: u64 = 0xb3d3u64;
#[doc = ""]
pub const SKEIN1024_928: u64 = 0xb3d4u64;
#[doc = ""]
pub const SKEIN1024_936: u64 = 0xb3d5u64;
#[doc = ""]
pub const SKEIN1024_944: u64 = 0xb3d6u64;
#[doc = ""]
pub const SKEIN1024_952: u64 = 0xb3d7u64;
#[doc = ""]
pub const SKEIN1024_960: u64 = 0xb3d8u64;
#[doc = ""]
pub const SKEIN1024_968: u64 = 0xb3d9u64;
#[doc = ""]
pub const SKEIN1024_976: u64 = 0xb3dau64;
#[doc = ""]
pub const SKEIN1024_984: u64 = 0xb3dbu64;
#[doc = ""]
pub const SKEIN1024_992: u64 = 0xb3dcu64;
#[doc = ""]
pub const SKEIN1024_1000: u64 = 0xb3ddu64;
#[doc = ""]
pub const SKEIN1024_1008: u64 = 0xb3deu64;
#[doc = ""]
pub const SKEIN1024_1016: u64 = 0xb3dfu64;
#[doc = ""]
pub const SKEIN1024_1024: u64 = 0xb3e0u64;
#[doc = "Extremely fast non-cryptographic hash algorithm"]
pub const XXH_32: u64 = 0xb3e1u64;
#[doc = "Extremely fast non-cryptographic hash algorithm"]
pub const XXH_64: u64 = 0xb3e2u64;
#[doc = "Extremely fast non-cryptographic hash algorithm"]
pub const XXH3_64: u64 = 0xb3e3u64;
#[doc = "Extremely fast non-cryptographic hash algorithm"]
pub const XXH3_128: u64 = 0xb3e4u64;
#[doc = "Poseidon using BLS12-381 and arity of 2 with Filecoin parameters"]
pub const POSEIDON_BLS12_381_A2_FC1: u64 = 0xb401u64;
#[doc = "Poseidon using BLS12-381 and arity of 2 with Filecoin parameters - high-security variant"]
pub const POSEIDON_BLS12_381_A2_FC1_SC: u64 = 0xb402u64;
#[doc = "The result of canonicalizing an input according to URDCA-2015 and then expressing its hash value as a multihash value."]
pub const URDCA_2015_CANON: u64 = 0xb403u64;
#[doc = "SimpleSerialize (SSZ) serialization"]
pub const SSZ: u64 = 0xb501u64;
#[doc = "SSZ Merkle tree root using SHA2-256 as the hashing function and SSZ serialization for the block binary"]
pub const SSZ_SHA2_256_BMT: u64 = 0xb502u64;
#[doc = "The result of canonicalizing an input according to JCS - JSON Canonicalisation Scheme (RFC 8785)"]
pub const JSON_JCS: u64 = 0xb601u64;
#[doc = "ISCC (International Standard Content Code) - similarity preserving hash"]
pub const ISCC: u64 = 0xcc01u64;
#[doc = "0xcert Asset Imprint (root hash)"]
pub const ZEROXCERT_IMPRINT_256: u64 = 0xce11u64;
#[doc = "Namespace for all not yet standard signature algorithms"]
#[deprecated]
pub const NONSTANDARD_SIG: u64 = 0xd000u64;
#[doc = "ES256K Siganture Algorithm (secp256k1)"]
pub const ES256K: u64 = 0xd0e7u64;
#[doc = "G1 signature for BLS-12381-G2"]
pub const BLS_12381_G1_SIG: u64 = 0xd0eau64;
#[doc = "G2 signature for BLS-12381-G1"]
pub const BLS_12381_G2_SIG: u64 = 0xd0ebu64;
#[doc = "Edwards-Curve Digital Signature Algorithm"]
pub const EDDSA: u64 = 0xd0edu64;
#[doc = "EIP-191 Ethereum Signed Data Standard"]
pub const EIP_191: u64 = 0xd191u64;
#[doc = "JSON object containing only the required members of a JWK (RFC 7518 and RFC 7517) representing the public key. Serialisation based on JCS (RFC 8785)"]
pub const JWK_JCS_PUB: u64 = 0xeb51u64;
#[doc = "Filecoin piece or sector data commitment merkle node/root (CommP & CommD)"]
pub const FIL_COMMITMENT_UNSEALED: u64 = 0xf101u64;
#[doc = "Filecoin sector data commitment merkle node/root - sealed and replicated (CommR)"]
pub const FIL_COMMITMENT_SEALED: u64 = 0xf102u64;
#[doc = ""]
pub const PLAINTEXTV2: u64 = 0x706c61u64;
#[doc = "Holochain v0 address    + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_ADR_V0: u64 = 0x807124u64;
#[doc = "Holochain v1 address    + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_ADR_V1: u64 = 0x817124u64;
#[doc = "Holochain v0 public key + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_KEY_V0: u64 = 0x947124u64;
#[doc = "Holochain v1 public key + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_KEY_V1: u64 = 0x957124u64;
#[doc = "Holochain v0 signature  + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_SIG_V0: u64 = 0xa27124u64;
#[doc = "Holochain v1 signature  + 8 R-S (63 x Base-32)"]
pub const HOLOCHAIN_SIG_V1: u64 = 0xa37124u64;
#[doc = "Skynet Namespace"]
pub const SKYNET_NS: u64 = 0xb19910u64;
#[doc = "Arweave Namespace"]
pub const ARWEAVE_NS: u64 = 0xb29910u64;
#[doc = "Subspace Network Namespace"]
pub const SUBSPACE_NS: u64 = 0xb39910u64;
#[doc = "Kumandra Network Namespace"]
pub const KUMANDRA_NS: u64 = 0xb49910u64;
#[doc = "ES256 Signature Algorithm"]
pub const ES256: u64 = 0xd01200u64;
#[doc = "ES384 Signature Algorithm"]
pub const ES284: u64 = 0xd01201u64;
#[doc = "ES512 Signature Algorithm"]
pub const ES512: u64 = 0xd01202u64;
#[doc = "RS256 Signature Algorithm"]
pub const RS256: u64 = 0xd01205u64;
#[doc = "SCION Internet architecture"]
pub const SCION: u64 = 0xd02000u64;
