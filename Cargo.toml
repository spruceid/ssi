[package]
name = "ssi"
version = "0.7.0"
authors = ["Spruce Systems, Inc."]
edition = "2021"
license = "Apache-2.0"
description = "Core library for Verifiable Credentials and Decentralized Identifiers."
repository = "https://github.com/spruceid/ssi/"
documentation = "https://docs.rs/ssi/"
keywords = ["ssi", "did", "vc", "vp", "jsonld"]

exclude = ["json-ld-api/*", "json-ld-normalization/*", "vc-test-suite/*"]

# [features]
# # default = ["w3c", "ripemd-160", "eip", "tezos"]

# # w3c = ["ssi-ldp/w3c", "secp256k1", "ed25519", "secp256r1", "rsa"]
# # ## enable secp256k1 signatures
# # secp256k1 = ["ssi-ldp/secp256k1"]
# # ## enable secp256r1 (p256) signatures
# # secp256r1 = ["ssi-ldp/secp256r1"]
# # ## enable secp384r1 (p384) signatures
# # secp384r1 = ["ssi-ldp/secp384r1"]
# # ## enable ed25519 (EdDSA) signatures
# # ed25519 = ["ssi-ldp/ed25519", "ssi-jwk/ed25519", "ssi-jws/ed25519"]
# # ## enable RSA signatures
# # rsa = ["ssi-ldp/rsa"]
# # ## enable ripemd hashes
# # ripemd-160 = ["ssi-jwk/ripemd-160"]
# # ## enable bbs
# # bbs = ["ssi-crypto/bbs"]

# # ## enable aleo ecosystem signatures
# # aleo = ["ssi-ldp/aleo", "ssi-caips/aleo", "ssi-jws/aleo"]
# # ## enable ethereum style signatures
# # eip = ["ssi-caips/eip", "ssi-jwk/eip", "ssi-ldp/eip", "ssi-crypto/keccak"]
# # ## enable tezos style signatures
# # tezos = ["ssi-caips/tezos", "ssi-jwk/tezos", "ssi-jws/tezos", "ssi-ldp/tezos"]
# # ## enable LDPs from the Solana Ecosystem
# # solana = ["ssi-ldp/solana"]

# # ## Use the Ring crate for crypto operations
# # ring = ["ssi-jwk/ring", "ssi-jws/ring", "ssi-crypto/ring"]

# # http-did = ["ssi-dids/http"]
# # example-http-issuer = ["ssi-ldp/example-http-issuer"]

# # # Backward compatibility features
# # ed25519-dalek = ["ed25519"]
# # keccak = ["eip"]
# # sha = ["rsa"]

[workspace]
members = [
  "crates/*",
  "crates/verification-methods/core",
  "crates/dids/core",
  "crates/dids/methods/*",
  "crates/claims/core",
  "crates/claims/crates/*",
  "crates/claims/crates/data-integrity/core",
  "crates/claims/crates/data-integrity/suites",
  "vc-test",
  # "ssi-sd-jwt",
]

[workspace.dependencies]
ssi-core = { path = "./crates/core", version = "0.1" }
ssi-multicodec = { path = "./crates/multicodec", version = "0.1" }
ssi-crypto = { path = "./crates/crypto", version = "0.1" }
ssi-verification-methods-core = { path = "./crates/verification-methods/core", version = "0.1" }
ssi-verification-methods = { path = "./crates/verification-methods", version = "0.1" }
ssi-jwk = { path = "./crates/jwk", version = "0.1", default-features = false }
ssi-jws = { path = "./crates/jws", version = "0.1", default-features = false }
ssi-tzkey = { path = "./crates/tzkey", version = "0.1" }
ssi-eip712 = { path = "./crates/eip712", version = "0.1" }
ssi-rdf = { path = "./crates/rdf", version = "0.1" }
ssi-contexts = { path = "./crates/contexts", version = "0.1.5" }
ssi-json-ld = { path = "./crates/json-ld", version = "0.2.2" }
ssi-security = { path = "./crates/security", version = "0.1" }
ssi-caips = { path = "./crates/caips", version = "0.1" }

# Verifiable Claims
ssi-claims-core = { path = "./crates/claims/core", version = "0.1" }
ssi-jwt = { path = "./crates/claims/crates/jwt", version = "0.1" }
ssi-vc = { path = "./crates/claims/crates/vc", version = "0.1" }
ssi-data-integrity-core = { path = "./crates/claims/crates/data-integrity/core", version = "0.1" }
ssi-data-integrity-suites = { path = "./crates/claims/crates/data-integrity/suites", version = "0.1" }
ssi-data-integrity = { path = "./crates/claims/crates/data-integrity", version = "0.1" }
ssi-claims = { path = "./crates/claims", version = "0.1" }

# DID methods
ssi-dids-core = { path = "./crates/dids/core", version = "0.1" }
did-ethr = { path = "./crates/dids/methods/ethr", version = "0.2.1" }
did-ion = { path = "./crates/dids/methods/ion", version = "0.2.0" }
did-jwk = { path = "./crates/dids/methods/jwk", version = "0.1.1" }
did-method-key = { path = "./crates/dids/methods/key", version = "0.2.1" }
did-pkh = { path = "./crates/dids/methods/pkh", version = "0.2.1" }
did-tz = { path = "./crates/dids/methods/tz", version = "0.2.1" }
did-web = { path = "./crates/dids/methods/web", version = "0.2.2" }
ssi-dids = { path = "./crates/dids", version = "0.2" }

# other common dependencies
async-std = "1.9"
async-trait = "0.1.68"
thiserror = "1.0.40"
chrono = "0.4.24"
iref = "3.1.2"
static-iref = "3.0"
rdf-types = "0.18.3"
# xsd-types = "0.7.6"
xsd-types = { git = "https://github.com/timothee-haudebourg/xsd-types.git" }
grdf = "0.22"
locspan = "0.8"
json-syntax = "0.11.7"
nquads-syntax = "0.17"
multibase = "0.9.1"
# json-ld = "0.15"
json-ld = { git = "https://github.com/timothee-haudebourg/json-ld.git" }
serde = "1.0"
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
serde_jcs = "0.1.0"
bs58 = "0.4"
hex = "0.4.3"
derivative = "2.2.0"
educe = "0.4.22"
pin-project = "1.1.3"
futures = "0.3.28"
linked-data = { git = "https://github.com/spruceid/linked-data-rs.git" }
rand_chacha = "0.3.1"
contextual = "0.1.6"
lazy_static = "1.4.0"

[dependencies]
# ssi-vc.workspace = true
ssi-rdf.workspace = true
ssi-json-ld.workspace = true
ssi-claims.workspace = true
ssi-dids.workspace = true
# # ssi-jwk = { path = "./ssi-jwk", version = "0.1", default-features = false }
# # ssi-json-ld = { path = "./ssi-json-ld", version = "0.2", default-features = false }
# # ssi-core = { path = "./ssi-core", version = "0.1" }
# # ssi-dids = { path = "./ssi-dids", version = "0.1" }
# # ssi-crypto = { path = "./ssi-crypto", version = "0.1", default-features = false }
# # ssi-jws = { path = "./ssi-jws", version = "0.1", default-features = false }
# # ssi-jwt = { path = "./ssi-jwt", version = "0.1", default-features = false }
# # ssi-tzkey = { path = "./ssi-tzkey", version = "0.1", default-features = false }
# # ssi-ldp = { path = "./ssi-ldp", version = "0.2", default-features = false }
# # ssi-ssh = { path = "./ssi-ssh", version = "0.1", default-features = false }
# # ssi-ucan = { path = "./ssi-ucan", version = "0.1" }
# ssi-vc.workspace = true
# # ssi-zcap-ld = { path = "./ssi-zcap-ld", version = "0.1" }
# # ssi-caips = { path = "./ssi-caips", version = "0.1", default-features = false }

[dev-dependencies]
async-std = { workspace = true, features = ["attributes"] }
# uuid = { version = "0.8", features = ["v4", "serde"] }
serde_json.workspace = true
# ssi-dids = { path = "./ssi-dids", version = "0.1", features = ["example"] }

# [package.metadata.docs.rs]
# all-features = true
# rustdoc-args = ["--cfg", "docsrs"]

# # $cargo release
# [workspace.metadata.release]
# sign-tag = true
# tag-prefix = "{{crate_name}}/"
# tag-message = "Release {{crate_name}} version {{version}}."
# pre-release-commit-message = "Release"

# # $git-cliff --config Cargo.toml > CHANGELOG.md
# [workspace.metadata.git-cliff.changelog]
# header = """
# # Changelog
# All notable changes to this project will be documented in this file.

# The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
# and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

# """
# body = """
# {% if version %}\
#     ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
# {% else %}\
#     ## [Unreleased]
# {% endif %}\
# {% for group, commits in commits | group_by(attribute="group") %}
#     ### {{ group | upper_first }}\
#     {% for commit in commits %}
#         - [{{ commit.id | truncate(length=7, end="") }}] {{ commit.message }}\
#     {% endfor %}
# {% endfor %}\n
# """
# trim = true
# [workspace.metadata.git-cliff.git]
# commit_preprocessors = [
#   { pattern = "\\n.*", replace = ""},
# ]
# conventional_commits = false
# filter_unconventional = false
# commit_parsers = [
#   { message = "^[aA]dd( |ed)", group = "Added"},
#   { message = "^[fF]ix", group = "Fixed"},
#   { message = "^[cC]hange", group = "Changed"},
#   { message = "^[mM]ove", group = "Changed"},
#   { message = "^[rR]estructure", group = "Changed"},
#   { message = "^[rR]efactor", group = "Changed"},
#   { message = "^[rR]emove", group = "Removed"},
#   { message = ".*", group = "Other"},
# ]
# # filter_commits = false
# tag_pattern = "v[0-9]*"